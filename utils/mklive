#!/bin/bash
#
# Ataraxia Linux Live CD generator
#

msg() { echo -e "\033[1;32m >>> \033[0m$@"; }
msgtwo() { echo -e "\033[1;35m * \033[0m$@"; }
die() { echo -e "\033[1;31m >>> \033[0m$@"; exit 1; }
dietwo() { echo -e "\033[1;31m * \033[0m$@"; exit 1; }
pushd () { command pushd "$@" > /dev/null; }
popd () { command popd "$@" > /dev/null; }

generate_initramfs() {
	msg "Generating initramfs"

	msgtwo "Installing core packages"
	kagami -EWn -c "$BUILD"/target.config -r "$INITRAMFS" \
		base-files musl file bzip2 shadow sed grep bash dash ca-certificates kagami \
		coreutils findutils dialog less pigz iproute2 kbd tar vim procps-ng util-linux \
		busybox ubase s6 reiser4progs dosfstools eudev wireless_tools wpa_supplicant gptfdisk \
		linux
	kagami -R -r "$INITRAMFS" musl-fts libuargp libelf

	pushd "$INITRAMFS"
		ln -sf usr/bin/init init

		msgtwo "Cleaning initramfs"
		rm -rf usr/include

		find . -name "*.a" -print0 | xargs -0 rm -rf
		find . -name "*.h" -print0 | xargs -0 rm -rf
		find . -name "*.hpp" -print0 | xargs -0 rm -rf
		find . -name "*.pc" -print0 | xargs -0 rm -r

		msgtwo "Generating archive"
		mv boot/vmlinuz-linux "$ISODIR"/seiba/seiba

		find . | cpio -H newc -o | pixz -9 > "$ISODIR"/seiba/seiba.xz
	popd

	msg "Generation succeeded"
}

make_iso_ppc() {
	msg "Creating .iso image for PowerPC-based PCs"

	mkdir -p "$TOOLS"/share/grub
	cp "$STUFF"/mklive/unicode.pf2 "$TOOLS"/share/grub/unicode.pf2

	mkdir -p "$ISODIR"/boot/grub

cat << CEOF > "$ISODIR"/boot/grub/grub.cfg
menuentry "Ataraxia Linux" {
linux	/seiba/seiba quiet loglevel=4
initrd	/seiba/seiba.xz
}
CEOF

	grub-mkrescue \
		--output "$BUILD"/ataraxialinux-$BARCH.iso "$ISODIR"/ \
		-A 'ataraxialinux' -V 'ataraxialinux'
}

make_iso_x86() {
	msg "Creating .iso image for x86-based PCs"

	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/boot/isolinux

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio multiboot2 efi_uga"

	case $BARCH in
		x86_64)
			format="x86_64-efi"
			efi="bootx64.efi"
			;;
		i586)
			format="i386-efi"
			efi="bootia32.efi"
			;;
	esac

cat << CEOF > "$GRUBEFICFG"
search --no-floppy --set=root --label "ataraxialinux"
set prefix=(\$root)/boot/grub
CEOF

cat << CEOF > "$ISODIR"/boot/grub/grub.cfg
menuentry "Ataraxia Linux" {
linux	/seiba/seiba quiet loglevel=4
initrd	/seiba/seiba.xz
}
CEOF

	grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	cp -a "$STUFF"/mklive/isolinux.bin "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/ldlinux.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libcom32.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/vesamenu.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libutil.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/chain.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/background.png "$ISODIR"/boot/isolinux/background.png

cat << CEOF > "$ISODIR"/boot/isolinux/isolinux.cfg
UI vesamenu.c32
PROMPT 0
TIMEOUT 100
ONTIMEOUT ataraxialinux
MENU TABMSG Press ENTER to boot or TAB to edit a menu entry
MENU AUTOBOOT BIOS default device boot in # second{,s}...
MENU BACKGROUND /boot/isolinux/background.png
MENU WIDTH 78
MENU MARGIN 1
MENU ROWS 4
MENU VSHIFT 2
MENU TIMEOUTROW 8
MENU TABMSGROW 2
MENU CMDLINEROW 11
MENU HELPMSGROW 16
MENU HELPMSGENDROW 29
MENU COLOR title        * #9000FF *
MENU COLOR border       * #00000000 #00000000 none
MENU COLOR sel          * #ffffffff #9000FF *
LABEL ataraxialinux
MENU LABEL Ataraxia Linux
KERNEL /seiba/seiba
APPEND initrd=/seiba/seiba.xz quiet loglevel=4
CEOF

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/isolinux/boot.cat \
		-b boot/isolinux/isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$BARCH.iso \
		"$ISODIR"/
}

while getopts bsa options; do
	case $options in
		b)
			BUILD="$OPTARG"
			;;
		s)
			STUFF="$OPTARG"
			;;
		a)
			ARCH="$OPTARG"
			;;
		:)
			die "Option '-${OPTARG}' needs an argument"
			;;
		\?)
			die "Option '-${OPTARG}' is illegal"
			;;
	esac
done
if [ "$#" -eq 0 ]; then
	die "Specify options."
fi
shift $((OPTIND - 1))

[ "$BUILD" ] || die 'Variable for build directory is not set'
[ "$STUFF" ] || die 'Variable for "stuff" directory is not set'

BUILD="$(realpath $BUILD)"
STUFF="$(realpath $STUFF)"

ISODIR="$BUILD/rootcd"
INITRAMFS="$BUILD/initramfs"
GRUBEFICFG="$BUILD/efi.cfg"

rm -rf "$ISODIR" "$INITRAMFS" "$GRUBEFICFG"
mkdir -p "$ISODIR/seiba" "$INITRAMFS"

generate_initramfs

case $BARCH in
	x86_64|i586)
		make_iso_x86
		;;
	ppc64le|ppc64|ppc)
		make_iso_ppc
		;;
	*)
		die "Architecture is not set or is not supported in mklive"
esac

exit 0

