#!/bin/bash
#
# Utility to bootstrap Ataraxia Linux distribution
#

set -e

msg() {
	if [ "$SILENT" != "1" ]; then
		echo -e "\033[1;32m >>> \033[0m$@"
	fi
}

die() {
	if [ "$SILENT" != "1" ]; then
		echo -e "\033[1;31m >>> \033[0m$@"
	fi
	exit 1
}

pushd () { command pushd "$@" > /dev/null; }
popd () { command popd "$@" > /dev/null; }

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'kagami'"
	fi
}

generate_config() {
	local file="$1"

if [ "$USE_TARGET" = "1" ]; then
cat <<EOF > "$file"
export LC_ALL="$LC_ALL"
export BARCH="$BARCH"
export MKOPTS="$MKOPTS"
export OPTIONS=('emptydirs' '~strip' 'makeflags' '~locales' '~docs' '~ccache')
export REPOS=("${REPO}")
export PKGDEST="$PACKAGES"
export SRCDEST="$SOURCES"
export CFLAGS="$CFLAGS"
export CXXFLAGS="$CXXFLAGS"
export XHOST="$XHOST"
export XTARGET="$XTARGET"
export CROSS_COMPILE="$XTARGET-"
export CC="$XTARGET-gcc"
export CXX="$XTARGET-g++"
export AR="$XTARGET-ar"
export AS="$XTARGET-as"
export RANLIB="$XTARGET-ranlib"
export LD="$XTARGET-ld"
export STRIP="$XTARGET-strip"
export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
export PERLFLAGS="--target=$XTARGET"
export PKG_CONFIG_PATH="$ROOTFS/usr/lib/pkgconfig:$ROOTFS/usr/share/pkgconfig"
export PKG_CONFIG_SYSROOT_DIR="$ROOTFS"
export HOSTCC="$HOSTCC"
export HOSTCXX="$HOSTCXX"
export ORIGMAKE="$ORIGMAKE"
export PATH="$PATH"
export STUFF="$STUFF"
EOF
elif [ "$USE_HOST" = "1" ]; then
cat <<EOF > "$file"
export LC_ALL="$LC_ALL"
export BARCH="$BARCH"
export MKOPTS="$MKOPTS"
export OPTIONS=('emptydirs' '~strip' 'makeflags' '~locales' '~docs' '~ccache')
export REPOS=("${TCREPO}" "${REPO}")
export PKGDEST="$PACKAGES"
export SRCDEST="$SOURCES"
export CFLAGS="$CFLAGS"
export CXXFLAGS="$CXXFLAGS"
export XHOST="$XHOST"
export XTARGET="$XTARGET"
export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
export PERLFLAGS="--target=$XTARGET"
export HOSTCC="$HOSTCC"
export HOSTCXX="$HOSTCXX"
export ORIGMAKE="$ORIGMAKE"
export PATH="$PATH"
export STUFF="$STUFF"
EOF
fi
}

setup_architecture() {
	case "$BARCH" in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-musl"
			;;
		i586)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i586-linux-musl"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-musl"
			;;
		armv7l)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabihf"
			;;
		armv6l)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabihf"
			;;
		armv5tel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabi"
			;;
		mips)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips-linux-musl"
			;;
		mipsel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mipsel-linux-musl"
			;;
		ppc64le)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64le-linux-musl"
			;;
		ppc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64-linux-musl"
			;;
		ppc)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc-linux-musl"
			;;
		s390x)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="s390x-linux-musl"
			;;
		riscv64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			;;
		riscv32)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-linux-musl"
			;;
		*)
			die "Architecture is not set or is not supported by 'bootstrap' script"
	esac
}

setup_environment() {
	msg "Setting up the build environment"

	export CWD="$(pwd)"
	export BUILD="$CWD/OUT.$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export STUFF="$CWD/stuff"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export UTILS="$CWD/utils"

	export LC_ALL="POSIX"
	export PATH="$UTILS:$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"
	export ORIGMAKE="$(which make)"

	if [ -z "$JOBS" ]; then
		export JOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$JOBS"

	if [ -z "$CFLAGS" ]; then
		export CFLAGS="-Os -fexcess-precision=fast -fomit-frame-pointer -Wl,--as-needed -pipe"
	fi
	if [ -z "$CXXFLAGS" ]; then
		export CXXFLAGS="$CFLAGS"
	fi
}

build_environment() {
	msg "Preparing the environment for build"

	rm -rf "$BUILD"
	mkdir -p "$BUILD" "$SOURCES" "$PACKAGES" "$ROOTFS" "$TOOLS"

	USE_HOST=1 generate_config "$BUILD"/host.config
	USE_TARGET=1 generate_config "$BUILD"/target.config
}

build_toolchain() {
	msg "Building cross-toolchain for '"$BARCH"' platform"

	msg "Adding fake ldconfig"
	mkdir -p "$TOOLS"/bin

	touch "$TOOLS"/bin/ldconfig
	chmod +x "$TOOLS"/bin/ldconfig

	case $BARCH in
		x86_64|i586|ppc64le|ppc64|ppc)
				GRUB="grub"
				;;
	esac

	for toolchain in base-files file gettext-tiny m4 bison flex bc ncurses cracklib kmod gperf pkgconf \
					linux-api-headers binutils gcc-static musl gcc $GRUB slibtool; do
		case $toolchain in
			base-files|linux-api-headers|musl)
				kagami -EWn -c "$BUILD"/host.config -r "$ROOTFS" ${toolchain}
				;;
			*)
				kagami -EWp -c "$BUILD"/host.config host-${toolchain}
				;;
		esac
	done
	touch "$TOOLS"/.riscv_elf

	if [ "$BARCH" = "riscv32" ] || [ "$BARCH" = "riscv64" ]; then
		if [ -z "$ELFOPTS" ]; then
			case $BARCH in
				riscv64)
					ELFOPTS="--with-arch=rv64imafdc --with-abi=lp64d"
					;;
				riscv32)
					ELFOPTS="--with-arch=rv32imafdc --with-abi=ilp32d"
					;;
			esac
		fi

		msg "Building cross-toolchain for '"$BARCH-elf"' platform"
		unset CFLAGS CXXFLAGS LDFLAGS
		cd "$SOURCES"
		git clone https://github.com/riscv/riscv-gnu-toolchain tools --depth 1
		cd tools
		git clone https://github.com/riscv/riscv-gcc --depth 1
		git clone https://github.com/riscv/riscv-binutils-gdb riscv-binutils --depth 1
		git clone https://github.com/riscv/riscv-newlib --depth 1
		./configure --prefix="$TOOLS" --disable-gdb --disable-linux $ELFOPTS
		make $MKOPTS
		touch "$TOOLS"/var/lib/db/installed_cross_riscv
		cd .. && rm -rf  tools
		touch "$TOOLS"/.riscv_elf
	fi

	msg "Cleaning up"
	find "$TOOLS" -name "*.la" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf

	msg "Adding fake make"
	cp "$STUFF"/fakemake "$TOOLS"/bin/make
	sed -i "s,uncom,$ORIGMAKE,g" "$TOOLS"/bin/make
}

while getopts :s:a:j:g:e:uA options; do
	case $options in
		s)
			mode=stage
			STAGE="$OPTARG"
			;;
		u)
			mode=check-updates
			;;
		A)
			mode=autobumb
			;;
		a)
			BARCH="$OPTARG"
			;;
		j)
			JOBS="$OPTARG"
			;;
		g)
			GCCOPTS="$OPTARG"
			;;
		e)
			ELFOPTS="$OPTARG"
			;;
		:)
			die "Option '-${OPTARG}' needs an argument"
			;;
		\?)
			die "Option '-${OPTARG}' is illegal"
			;;
	esac
done
if [ "$#" -eq 0 ]; then
	die "Specify options."
fi
shift $((OPTIND - 1))

if [ "$mode" = "check-updates" ] || [ "$mode" = "autobumb" ]; then
	case $mode in
		autobumb)
			cmd="check-updates -a"
			;;
		check-updates)
			cmd="check-updates"
			;;
	esac

	SILENT=1 setup_environment
	msg "Checking packages for updates"
	for packages in $(ls "$REPO/"); do
		case $packages in
			base-files|autoconf2.13|musl-tools)
				true
				;;
			*)
				pushd "$REPO"
					(
						$cmd $packages
					)
				popd
				;;
		esac
	done
elif [ "$mode" = "stage" ]; then
	case $STAGE in
		0)
			check_for_root
			setup_architecture
			setup_environment
			build_environment
			build_toolchain
			;;
		*)
			die "Stage number was not selected or is not supported"
			;;
	esac
fi

exit 0

