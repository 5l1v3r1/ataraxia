#!/bin/bash
#
# Utility to bootstrap Ataraxia Linux distribution
#

set -e

msg() {
	if [ "$SILENT" != "1" ]; then
		printf '[\033[32m INFO\033[m ] %s\n' "$@"
	fi
}

die() {
	if [ "$SILENT" != "1" ]; then
		printf '[\033[31m FAIL\033[m ] %s\n' "$@"
	fi
	exit 1
}

pushd () { command pushd "$@" > /dev/null; }
popd () { command popd "$@" > /dev/null; }

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'kagami'"
	fi
}

generate_config() {
	local file="$1"

if [ "$USE_TARGET" = "1" ]; then
	cat > "$file" <<- EOF
		export LC_ALL="$LC_ALL"
		export BARCH="$BARCH"
		export MKOPTS="$MKOPTS"
		export OPTIONS=('emptydirs' 'strip' 'makeflags' '~locales' '~docs' '~ccache')
		export REPOS=("${REPO}")
		export ROOTFS="$ROOTFS"
		export TOOLS="$TOOLS"
		export PKGDEST="$PACKAGES"
		export SRCDEST="$SOURCES"
		export CFLAGS="$CFLAGS"
		export CXXFLAGS="$CXXFLAGS"
		export XHOST="$XHOST"
		export XTARGET="$XTARGET"
		export CROSS_COMPILE="$XTARGET-"
		export CC="$XTARGET-gcc"
		export CXX="$XTARGET-g++"
		export AR="$XTARGET-ar"
		export AS="$XTARGET-as"
		export RANLIB="$XTARGET-ranlib"
		export LD="$XTARGET-ld"
		export STRIP="$XTARGET-strip"
		export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
		export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
		export PERLFLAGS="--target=$XTARGET"
		export PKG_CONFIG_PATH="$ROOTFS/usr/lib/pkgconfig:$ROOTFS/usr/share/pkgconfig"
		export PKG_CONFIG_SYSROOT_DIR="$ROOTFS"
		export HOSTCC="$HOSTCC"
		export HOSTCXX="$HOSTCXX"
		export ORIGMAKE="$ORIGMAKE"
		export PATH="$PATH"
		export STUFF="$STUFF"
		export EMBEDDED="$EMBEDDED"
	EOF
elif [ "$USE_HOST" = "1" ]; then
	cat > "$file" <<- EOF
		export LC_ALL="$LC_ALL"
		export BARCH="$BARCH"
		export MKOPTS="$MKOPTS"
		export OPTIONS=('emptydirs' '~strip' 'makeflags' '~locales' '~docs' '~ccache')
		export REPOS=("${TCREPO}" "${REPO}")
		export ROOTFS="$ROOTFS"
		export TOOLS="$TOOLS"
		export PKGDEST="$PACKAGES"
		export SRCDEST="$SOURCES"
		export CFLAGS="$CFLAGS"
		export CXXFLAGS="$CXXFLAGS"
		export XHOST="$XHOST"
		export XTARGET="$XTARGET"
		export HOSTCC="$HOSTCC"
		export HOSTCXX="$HOSTCXX"
		export ORIGMAKE="$ORIGMAKE"
		export PATH="$PATH"
		export STUFF="$STUFF"
		export EMBEDDED="$EMBEDDED"
	EOF
fi
}

setup_architecture() {
	case "$BARCH" in
		amd64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-musl"
			;;
		i386)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i586-linux-musl"
			;;
		arm64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-musl"
			;;
		armhf)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabihf"
			;;
		armel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabi"
			;;
		mips64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips64-linux-musl"
			;;
		mips64el)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips64el-linux-musl"
			;;
		mips)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips-linux-musl"
			;;
		mipsel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mipsel-linux-musl"
			;;
		m68k)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="m68k-linux-musl"
			;;
		riscv64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			;;
		riscv32)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-linux-musl"
			;;
		*)
			die "Architecture is not set or is not supported by 'build' script"
	esac
}

setup_environment() {
	msg "Setting up the build environment"

	export CWD="$(pwd)"
	export BUILD="$CWD/OUT.$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export STUFF="$CWD/stuff"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export UTILS="$CWD/utils"

	export LC_ALL="POSIX"
	export PATH="$UTILS:$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"
	export ORIGMAKE="$(which make)"

	if [ -z "$JOBS" ]; then
		export JOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$JOBS"

	if [ -z "$CFLAGS" ]; then
		export CFLAGS="-g0 -Os -s -fexcess-precision=fast -fomit-frame-pointer -Wl,--as-needed -pipe"
	fi
	if [ -z "$CXXFLAGS" ]; then
		export CXXFLAGS="$CFLAGS"
	fi
}

build_environment() {
	msg "Preparing the environment for build"

	rm -rf "$BUILD"
	mkdir -p "$BUILD" "$SOURCES" "$PACKAGES" "$ROOTFS" "$TOOLS"

	USE_HOST=1 generate_config "$BUILD"/host.config
	USE_TARGET=1 generate_config "$BUILD"/target.config
}

build_toolchain() {
	msg "Building cross-toolchain for '${BARCH}' platform"

	msg "Adding fake ldconfig"
	mkdir -p "$TOOLS"/bin

	touch "$TOOLS"/bin/ldconfig
	chmod +x "$TOOLS"/bin/ldconfig

	for toolchain in dpkg base-files file gettext-tiny m4 bison flex bc ncurses kmod gperf pkgconf \
			linux-api-headers binutils gcc-static musl gcc slibtool; do
		case $toolchain in
			base-files|linux-api-headers)
				ne -c "$BUILD"/host.config -r "$ROOTFS" -EWn ${toolchain}
				;;
			musl)
				ne -c "$BUILD"/target.config -r "$ROOTFS" -EWn ${toolchain}
				;;
			*)
				ne -c "$BUILD"/host.config -EWp host-${toolchain}
				;;
		esac
	done

	case $BARCH in
		amd64|i386)
				ne -c "$BUILD"/host.config -EWp host-grub
				;;
	esac

	touch "$TOOLS"/.cross-linux

	if [ "$BARCH" = "riscv32" ] || [ "$BARCH" = "riscv64" ]; then
		if [ -z "$ELFOPTS" ]; then
			case $BARCH in
				riscv64)
					ELFOPTS="--with-arch=rv64imafdc --with-abi=lp64d"
					;;
				riscv32)
					ELFOPTS="--with-arch=rv32imafdc --with-abi=ilp32d"
					;;
			esac
		fi

		msg "Building cross-toolchain for '${BARCH}-elf' platform"
		unset CFLAGS CXXFLAGS LDFLAGS

		git clone https://github.com/protonesso/riscv-gnu-toolchain "$SOURCES"/riscv-tools --depth 1
		git clone https://github.com/riscv/riscv-gcc --depth 1 "$SOURCES"/riscv-tools/riscv-gcc
		git clone https://github.com/riscv/riscv-binutils-gdb --depth 1 "$SOURCES"/riscv-tools/riscv-binutils
		git clone https://github.com/riscv/riscv-newlib --depth 1 "$SOURCES"/riscv-tools/riscv-newlib

		pushd "$SOURCES"/riscv-tools
			./configure --prefix="$TOOLS" --disable-gdb --disable-linux $ELFOPTS
			make -j$JOBS MAKEINFO="true"
		popd

		touch "$TOOLS"/.cross-elf
	fi

	msg "Cleaning up"
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf

	msg "Adding fake make"
	cp "$STUFF"/fakemake "$TOOLS"/bin/make
	sed -i "s,uncom,$ORIGMAKE,g" "$TOOLS"/bin/make
}

build_target() {
	msg "Building target system for '${BARCH}' platform"

	if [ -z "$LINUX" ]; then
		LINUX="linux"
	fi

	if [ "$EMBEDDED" = "1" ]; then
		packages="$LINUX busybox"
	else
		packages="tzdata man-pages musl-tools zlib file ncurses readline m4 bison flex bc gmp mpfr mpc binutils gcc \
			ccache bzip2 pkgconf attr acl libcap pcre grep mksh bash libtool gdbm db expat perl nettle libressl ca-certificates \
			autoconf automake xz lzip lz4 zstd libarchive kmod gettext-tiny musl-fts libuargp libelf busybox mandoc dialog pigz libmnl libnftnl \
			libnfnetlink libnetfilter_conntrack libnl libpcap iptables iproute2 kbd make patch tar vim libcap-ng util-linux e2fsprogs \
			musl-obstack reiserfsprogs dosfstools hwids gperf eudev $LINUX dpkg dhcpcd wireless_tools wpa_supplicant popt gptfdisk libssh2 c-ares \
			libev nghttp2 curl"
	fi

	ne -c "$BUILD"/target.config -r "$ROOTFS" -EWn $packages
}

while getopts s:a:j:g:e:l:EuASLIcC options; do
	case $options in
		s)
			mode=stage
			STAGE="$OPTARG"
			;;
		u)
			mode=check-updates
			;;
		A)
			mode=autobumb
			;;
		S)
			mode=mkstage
			;;
		L)
			mode=mklive
			;;
		c)
			mode=clean
			dontreallyclean=0
			;;
		C)
			mode=clean
			dontreallyclean=1
			;;
		a)
			BARCH="$OPTARG"
			;;
		j)
			JOBS="$OPTARG"
			;;
		g)
			GCCOPTS="$OPTARG"
			;;
		e)
			ELFOPTS="$OPTARG"
			;;
		l)
			LINUX="$OPTARG"
			;;
		E)
			EMBEDDED="1"
			;;
		:)
			die "Option '-${OPTARG}' needs an argument"
			;;
		\?)
			die "Option '-${OPTARG}' is illegal"
			;;
	esac
done
if [ "$#" -eq 0 ]; then
	die "Specify options."
fi
shift $((OPTIND - 1))

if [ "$mode" = "check-updates" ] || [ "$mode" = "autobumb" ]; then
	case $mode in
		autobumb)
			cmd="check-updates -a"
			;;
		check-updates)
			cmd="check-updates"
			;;
	esac

	SILENT=1 setup_environment
	msg "Checking packages for updates"
	for packages in $(ls "$REPO/"); do
		case $packages in
			x264|apt|xdo)
				true
				;;
			*)
				pushd "$REPO"
					(
						$cmd $packages
					)
				popd
				;;
		esac
	done
elif [ "$mode" = "stage" ]; then
	case $STAGE in
		0)
			check_for_root
			setup_architecture
			setup_environment
			build_environment
			build_toolchain
			;;
		1)
			check_for_root
			setup_architecture
			setup_environment
			if [ ! -f "$TOOLS/.cross-linux" ]; then
				build_environment
				build_toolchain
			fi
			build_target
			;;
		*)
			die "Stage number was not selected or is not supported"
			;;
	esac
elif [ "$mode" = "mkstage" ] || [ "$mode" = "mkimage" ] || [ "$mode" = "mklive" ]; then
		check_for_root
		setup_architecture
		setup_environment

		. "$UTILS/$mode"

		main
elif [ "$mode" = "clean" ]; then
		check_for_root
		setup_architecture
		setup_environment

		if [ "$dontreallyclean" = "1" ]; then
			if [ -z "$LINUX" ]; then
				LINUX="linux"
			fi

			if [ "$EMBEDDED" = "1" ]; then
				packages="zlib kmod bc libuargp musl-obstrack bzip2 libelf lz4 xz zstd libressl $LINUX busybox"
			else
				packages="tzdata man-pages musl-tools zlib file ncurses readline m4 bison flex bc gmp mpfr mpc binutils gcc \
					ccache bzip2 pkgconf attr acl libcap pcre grep mksh bash libtool gdbm db expat perl nettle libressl ca-certificates \
					autoconf automake xz lzip lz4 zstd libarchive kmod gettext-tiny musl-fts libuargp libelf busybox mandoc dialog pigz libmnl libnftnl \
					libnfnetlink libnetfilter_conntrack libnl libpcap iptables iproute2 kbd make patch tar vim libcap-ng util-linux e2fsprogs \
					musl-obstack reiserfsprogs dosfstools hwids gperf eudev $LINUX dpkg dhcpcd wireless_tools wpa_supplicant popt gptfdisk libssh2 c-ares \
					libev nghttp2 curl"
			fi

			dpkg --root="$ROOTFS" --force-all -P $packages
		else
			rm -rf "$BUILD"
		fi
fi

exit 0
