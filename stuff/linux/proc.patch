Inspired by TinyWare: http://tinyware.ru

diff -ruN linux-5.4.1-orig/fs/proc/Kconfig linux-5.4.1/fs/proc/Kconfig
--- linux-5.4.1-orig/fs/proc/Kconfig	2019-11-29 18:10:32.000000000 +0900
+++ linux-5.4.1/fs/proc/Kconfig	2019-11-29 22:50:09.986735248 +0900
@@ -100,6 +100,14 @@
 	  Say Y if you are running any user-space software which takes benefit from
 	  this interface. For example, rkt is such a piece of software.
 
+config PROC_RESTRICT_ACCESS
+	default n
+	depends on PROC_FS
+	bool "Restrict access to processes in /proc"
+	help
+	  Restrict access to processes directories in /proc
+	  by setting permission 750 user:user_primary_group
+
 config PROC_PID_ARCH_STATUS
 	def_bool n
 	depends on PROC_FS
diff -ruN linux-5.4.1-orig/fs/proc/base.c linux-5.4.1/fs/proc/base.c
--- linux-5.4.1-orig/fs/proc/base.c	2019-11-29 18:10:32.000000000 +0900
+++ linux-5.4.1/fs/proc/base.c	2019-11-29 22:51:17.549208612 +0900
@@ -1705,7 +1705,11 @@
 	rcu_read_lock();
 	cred = __task_cred(task);
 	uid = cred->euid;
-	gid = cred->egid;
+#ifndef CONFIG_PROC_RESTRICT_ACCESS
+ 	gid = cred->egid;
+#else
+	gid = GLOBAL_ROOT_GID;
+#endif
 	rcu_read_unlock();
 
 	/*
@@ -3224,7 +3228,11 @@
 {
 	struct inode *inode;
 
-	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUGO | S_IXUGO);
+#ifndef CONFIG_PROC_RESTRICT_ACCESS
+ 	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUGO | S_IXUGO);
+#else
+	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUSR | S_IXUSR | S_IWUSR | S_IRGRP | S_IXGRP);
+#endif
 	if (!inode)
 		return ERR_PTR(-ENOENT);
 
@@ -3518,7 +3526,11 @@
 	struct task_struct *task, const void *ptr)
 {
 	struct inode *inode;
-	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUGO | S_IXUGO);
+#ifndef CONFIG_PROC_RESTRICT_ACCESS
+ 	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUGO | S_IXUGO);
+#else
+	inode = proc_pid_make_inode(dentry->d_sb, task, S_IFDIR | S_IRUSR | S_IXUSR | S_IWUSR | S_IRGRP | S_IXGRP);
+#endif
 	if (!inode)
 		return ERR_PTR(-ENOENT);
 
