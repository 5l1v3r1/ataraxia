From 4e16c9722b794a9bc4da346d07297d079edfd496 Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Mon, 2 Dec 2019 05:19:13 +0900
Subject: [PATCH] restore consolekit support

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 .../org.freedesktop.ConsoleKit.Manager.xml    | 25 ++++++++
 .../org.freedesktop.ConsoleKit.Session.xml    | 11 ++++
 js/misc/loginManager.js                       | 57 +++++++++++++++----
 3 files changed, 82 insertions(+), 11 deletions(-)
 create mode 100644 data/dbus-interfaces/org.freedesktop.ConsoleKit.Manager.xml
 create mode 100644 data/dbus-interfaces/org.freedesktop.ConsoleKit.Session.xml

diff --git a/data/dbus-interfaces/org.freedesktop.ConsoleKit.Manager.xml b/data/dbus-interfaces/org.freedesktop.ConsoleKit.Manager.xml
new file mode 100644
index 0000000..bf6a73c
--- /dev/null
+++ b/data/dbus-interfaces/org.freedesktop.ConsoleKit.Manager.xml
@@ -0,0 +1,25 @@
+<!-- $OpenBSD: org.freedesktop.ConsoleKit.Manager.xml,v 1.1 2019/01/17 19:00:46 ajacoutot Exp $ -->
+
+<node>
+  <interface name="org.freedesktop.ConsoleKit.Manager">
+    <method name="Suspend">                                                     
+      <arg type="b" direction="in"/>                                            
+    </method>                                                                   
+    <method name="CanSuspend">                                                  
+      <arg type="s" direction="out"/>                                           
+    </method>                                                                   
+    <method name="Inhibit">                                                     
+      <arg type="s" direction="in"/>                                            
+      <arg type="s" direction="in"/>                                            
+      <arg type="s" direction="in"/>                                            
+      <arg type="s" direction="in"/>                                            
+      <arg type="h" direction="out"/>                                           
+    </method>                                                                   
+    <signal name="PrepareForSleep">                                             
+      <arg type="b" direction="out"/>                                           
+    </signal>                                                                   
+    <method name="GetCurrentSession">
+      <arg type="o" direction="out"/>
+    </method>
+  </interface>                                                                  
+</node>
diff --git a/data/dbus-interfaces/org.freedesktop.ConsoleKit.Session.xml b/data/dbus-interfaces/org.freedesktop.ConsoleKit.Session.xml
new file mode 100644
index 0000000..ffa38fa
--- /dev/null
+++ b/data/dbus-interfaces/org.freedesktop.ConsoleKit.Session.xml
@@ -0,0 +1,11 @@
+<!-- $OpenBSD: org.freedesktop.ConsoleKit.Session.xml,v 1.1 2019/01/17 19:00:46 ajacoutot Exp $ -->
+
+<node>
+  <interface name="org.freedesktop.ConsoleKit.Session">
+    <signal name="Lock" />
+    <signal name="Unlock" />
+      <method name="SetLockedHint">                                               
+        <arg type="b" direction="in"/>                                            
+      </method>
+    </interface>
+</node>
diff --git a/js/misc/loginManager.js b/js/misc/loginManager.js
index f1ab257..63b2920 100644
--- a/js/misc/loginManager.js
+++ b/js/misc/loginManager.js
@@ -3,6 +3,9 @@
 
 const { GLib, Gio } = imports.gi;
 const Signals = imports.signals;
+const UPowerGlib = imports.gi.UPowerGlib;
+
+const Main = imports.ui.main;
 
 const { loadInterfaceXML } = imports.misc.fileUtils;
 
@@ -14,6 +17,12 @@ const SystemdLoginManager = Gio.DBusProxy.makeProxyWrapper(SystemdLoginManagerIf
 const SystemdLoginSession = Gio.DBusProxy.makeProxyWrapper(SystemdLoginSessionIface);
 const SystemdLoginUser = Gio.DBusProxy.makeProxyWrapper(SystemdLoginUserIface);
 
+const ConsoleKitManagerIface = loadInterfaceXML('org.freedesktop.ConsoleKit.Manager');
+const ConsoleKitSessionIface = loadInterfaceXML('org.freedesktop.ConsoleKit.Session');
+
+const ConsoleKitManager = Gio.DBusProxy.makeProxyWrapper(ConsoleKitManagerIface);
+const ConsoleKitSession = Gio.DBusProxy.makeProxyWrapper(ConsoleKitSessionIface);
+
 function haveSystemd() {
     return GLib.access("/run/systemd/seats", 0) >= 0;
 }
@@ -43,7 +52,7 @@ function canLock() {
                                                -1, null);
 
         let version = result.deep_unpack()[0].deep_unpack();
-        return haveSystemd() && versionCompare('3.5.91', version);
+       return versionCompare('3.5.91', version);
     } catch (e) {
         return false;
     }
@@ -83,7 +92,7 @@ function getLoginManager() {
         if (haveSystemd())
             _loginManager = new LoginManagerSystemd();
         else
-            _loginManager = new LoginManagerDummy();
+            _loginManager = new LoginManagerConsoleKit();
     }
 
     return _loginManager;
@@ -101,6 +110,9 @@ var LoginManagerSystemd = class {
                                   this._prepareForSleep.bind(this));
     }
 
+    // Having this function is a bit of a hack since the Systemd and ConsoleKit
+    // session objects have different interfaces - but in both cases there are
+    // Lock/Unlock signals, and that's all we count upon at the moment.
     getCurrentSessionProxy(callback) {
         if (this._currentSession) {
             callback (this._currentSession);
@@ -199,15 +211,37 @@ var LoginManagerSystemd = class {
 };
 Signals.addSignalMethods(LoginManagerSystemd.prototype);
 
-var LoginManagerDummy = class {
-    getCurrentSessionProxy(_callback) {
-        // we could return a DummySession object that fakes whatever callers
-        // expect (at the time of writing: connect() and connectSignal()
-        // methods), but just never calling the callback should be safer
+var LoginManagerConsoleKit = class {
+    constructor () {
+        this._proxy = new ConsoleKitManager(Gio.DBus.system,
+                                            'org.freedesktop.ConsoleKit',
+                                            '/org/freedesktop/ConsoleKit/Manager');
+        this._upClient = new UPowerGlib.Client();
+    }
+
+    getCurrentSessionProxy(callback) {
+        if (this._currentSession) {
+            callback (this._currentSession);
+            return;
+        }
+
+        this._proxy.GetCurrentSessionRemote((result, error) => {
+                if (error) {
+                    logError(error, 'Could not get a proxy for the current session');
+                } else {
+                    this._currentSession = new ConsoleKitSession(Gio.DBus.system,
+                                                                 'org.freedesktop.ConsoleKit',
+                                                                 result[0]);
+                    callback(this._currentSession);
+                }
+            });
     }
 
     canSuspend(asyncCallback) {
-        asyncCallback(false, false);
+        this._proxy.CanSuspendRemote((result, error) => {
+            asyncCallback(this._upClient.get_can_suspend(), false);
+            return false;
+        });
     }
 
     listSessions(asyncCallback) {
@@ -215,12 +249,13 @@ var LoginManagerDummy = class {
     }
 
     suspend() {
-        this.emit('prepare-for-sleep', true);
-        this.emit('prepare-for-sleep', false);
+        Main.screenShield.lock(true);
+
+        this._upClient.suspend_sync(null)
     }
 
     inhibit(reason, callback) {
         callback(null);
     }
 };
-Signals.addSignalMethods(LoginManagerDummy.prototype);
+Signals.addSignalMethods(LoginManagerConsoleKit.prototype);
-- 
2.24.0

